name: Moving Voting App Pipeline Demo
on: [push]
jobs:
  docker:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Import Docker Hub Secrets from Vault
      uses: hashicorp/vault-action@v2.4.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        token: ${{ secrets.VAULT_TOKEN }}
        namespace: ${{ secrets.VAULT_NAMESPACE }}
        secrets: |
          secret/data/ci DOCKERHUB_USERNAME | DOCKERHUB_USERNAME ;
          secret/data/ci DOCKERHUB_TOKEN | DOCKERHUB_TOKEN
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}
    - name: Build and push server image
      uses: docker/build-push-action@v3
      with:
        context: ./server
        push: true
        tags: vsgdev/jsmovievoting_api:1.0.0
    - name: Build and push client image
      uses: docker/build-push-action@v3
      with:
        context: ./client
        push: true
        tags: vsgdev/jsmovievoting_client:1.0.0
  kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: docker
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: latest
      id: install
    - name: Import Kubeconfig Secrets from Vault
      uses: hashicorp/vault-action@v2.4.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        token: ${{ secrets.VAULT_TOKEN }}
        namespace: ${{ secrets.VAULT_NAMESPACE }}
        secrets: |
          secret/data/ci/demo/kube GOOGLE_CRED_FILE | GOOGLE_CRED_FILE ;
          secret/data/ci/demo/kube KUBECONFIG_FILE | KUBECONFIG_FILE
    - name: Configure GKE gsa-key.json file
      run: |
        echo "$GOOGLE_CRED_FILE" > gsa-key.json
        echo "::set-output name=GOOGLE_CREDS::$(echo $(pwd)/gsa-key.json)"
      id: google-creds
    - name: Configure kubeconfig
      run: |
        echo -n "$KUBECONFIG_FILE" > kubeconfig.yml
        echo "::set-output name=KUBECONFIG_FILE::$(echo $(pwd)/kubeconfig.yml)"
      id: kubeconfig
    - name: Import App Secrets from Vault
      uses: hashicorp/vault-action@v2.4.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        token: ${{ secrets.VAULT_TOKEN }}
        namespace: ${{ secrets.VAULT_NAMESPACE }}
        secrets: |
          secret/data/ci/demo/app POSTGRES_DB | POSTGRES_DB ;
          secret/data/ci/demo/app POSTGRES_USER | POSTGRES_USER;
          secret/data/ci/demo/app POSTGRES_PASSWORD | POSTGRES_PSSWORD
    - name: Update Postgres DB yaml file
      uses: mikefarah/yq@master
      with:
        cmd: yq '(.spec.template.spec.containers[].env[] | select(.name == "POSTGRES_DB").value) = strenv(POSTGRES_DB) | (.spec.template.spec.containers[].env[] | select(.name == "POSTGRES_USER" or .name == "DATA_SOURCE_USER").value) = strenv(POSTGRES_USER) | (.spec.template.spec.containers[].env[] | select(.name == "POSTGRES_PASSWORD" or .name == "DATA_SOURCE_PASS").value) = strenv(POSTGRES_PASSWORD)' ./k8s/app/postgres.yml
      id: postgres-yq
    - name: Deploy Postgres DB 
      env:
        KUBECONFIG: ${{ steps.kubeconfig.outputs.KUBECONFIG_FILE }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.google-creds.outputs.GOOGLE_CREDS }}
      run: |
        echo "${{ steps.postgres-yq.outputs.result }}" | kubectl apply -f -
    - name: Update API yaml file
      uses: mikefarah/yq@master
      with:
        cmd: yq '(.spec.template.spec.containers[].env[] | select(.name == "POSTGRES_DB").value) = strenv(POSTGRES_DB) | (.spec.template.spec.containers[].env[] | select(.name == "POSTGRES_USER").value) = strenv(POSTGRES_USER) | (.spec.template.spec.containers[].env[] | select(.name == "POSTGRES_PASSWORD").value) = strenv(POSTGRES_PASSWORD)' ./k8s/app/api.yml
      id: api-yq
    - name: Deploy API 
      env:
        KUBECONFIG: ${{ steps.kubeconfig.outputs.KUBECONFIG_FILE }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.google-creds.outputs.GOOGLE_CREDS }}
      run: |
        echo "${{ steps.api-yq.outputs.result }}" | kubectl apply -f -
    - name: Deploy Frontend Client
      env:
        KUBECONFIG: ${{ steps.kubeconfig.outputs.KUBECONFIG_FILE }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.google-creds.outputs.GOOGLE_CREDS }}
      run: |
        kubectl apply -f k8s/app/client.yml