pipeline {
    agent any

    tools {
        nodejs '14.15'
    }

    stages {
        stage('Test Client') {
            steps {
                sh 'node -v'
                sh 'npm -v'
                dir('client') {
                    // sh 'npm install'
                    // sh 'npm test'
                }
            }
        }

        stage('SonarQube Scan') {
            environment {
                SONAR_TOKEN = vault path: 'secret/uemdemo/sonarqube', key: 'auth_token'
            }
            steps {
                script {
                    def scannerHome = tool 'SonarScanner';
                    withSonarQubeEnv(installationName: 'demo-sonarcloud', envOnly: false) {
                        wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: env['SONAR_TOKEN'], var: 'SECRET']]]) {
                            echo "${SONAR_TOKEN}"
                            sh "${scannerHome}/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner -Dsonar.login=${SONAR_TOKEN} -Dsonar.organization=wickylim-vs -Dsonar.projectKey=jsmovievoting -Dsonar.sources=."
                        }
                    }
                }
            }
        }
        stage("SonarQube Quality Gate") {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
